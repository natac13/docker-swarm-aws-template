{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Docker Swarm setup.",
  "Conditions": {
    "CreateLogResources": {
      "Fn::Equals": [
        {
          "Ref": "EnableCloudWatchLogs"
        },
        "yes"
      ]
    },
    "HasOnly2AZs": {
      "Fn::Equals": [
        {
          "Fn::FindInMap": [
            "AWSRegion2AZ",
            {
              "Ref": "AWS::Region"
            },
            "NumAZs"
          ]
        },
        "2"
      ]
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Swarm Size"
          },
          "Parameters": ["ManagerSize", "ClusterSize"]
        },
        {
          "Label": {
            "default": "Swarm Properties"
          },
          "Parameters": ["KeyName", "EnableCloudWatchLogs", "SSHLocation"]
        },
        {
          "Label": {
            "default": "Swarm Manager Properties"
          },
          "Parameters": [
            "ManagerInstanceType",
            "ManagerDiskSize",
            "ManagerDiskType",
            "EnableSystemPrune"
          ]
        },
        {
          "Label": {
            "default": "Swarm Worker Properties"
          },
          "Parameters": [
            "WorkerInstanceType",
            "WorkerDiskSize",
            "WorkerDiskType"
          ]
        }
      ],
      "ParameterLabels": {
        "ClusterSize": {
          "default": "Number of Swarm worker nodes?"
        },
        "EnableCloudWatchLogs": {
          "default": "Use Cloudwatch for container logging?"
        },
        "EnableSystemPrune": {
          "default": "Enable daily resource cleanup?"
        },
        "WorkerInstanceType": {
          "default": "Agent worker instance type?"
        },
        "KeyName": {
          "default": "Which SSH key to use?"
        },
        "ManagerDiskSize": {
          "default": "Manager ephemeral storage volume size?"
        },
        "ManagerDiskType": {
          "default": "Manager ephemeral storage volume type"
        },
        "ManagerInstanceType": {
          "default": "Swarm manager instance type?"
        },
        "ManagerSize": {
          "default": "Number of Swarm managers?"
        },
        "WorkerDiskSize": {
          "default": "Worker ephemeral storage volume size?"
        },
        "WorkerDiskType": {
          "default": "Worker ephemeral storage volume type"
        },
        "SSHLocation": {
          "default": "SSH Ip for access to the EC2 instances."
        }
      }
    },
    "AWS::CloudFormation::Designer": {
      "0b630a3e-8b47-4876-bc52-7b0c367e0c8f": {
        "size": {
          "width": 1120,
          "height": 970
        },
        "position": {
          "x": 420,
          "y": 90
        },
        "z": 1,
        "embeds": [
          "d780bac1-56c2-425e-a534-a3f55f40e397",
          "5ddc92d7-fa7c-41d4-a827-625da8863891",
          "1bd90a7c-409f-4ae2-a8ea-884184de0a15",
          "ff48ecc5-209e-49a4-9e81-602253cc6e8e",
          "b5b0775b-3d32-40f8-a6bf-c2b0455895d6",
          "829c36b5-fc86-4dc7-8cf1-9a9c84bd5151",
          "7d748840-94c2-409e-a76b-e68d416e46bf",
          "06906175-e554-4768-8cb5-547401eceadd",
          "5bc5d03a-a523-4c79-a0da-a84c6f65ed7d",
          "117d008d-7b69-4c5c-9fbd-fc3893e18896",
          "625bcd3e-aad4-4185-9d38-eaaa609b01f2",
          "900054dc-3593-4ce2-b356-79b07966625d"
        ]
      },
      "7d748840-94c2-409e-a76b-e68d416e46bf": {
        "size": {
          "width": 330,
          "height": 210
        },
        "position": {
          "x": 450,
          "y": 120
        },
        "z": 2,
        "parent": "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
        "embeds": [],
        "dependson": ["0b630a3e-8b47-4876-bc52-7b0c367e0c8f"]
      },
      "e5d473f6-1ff8-4f9b-89e6-723978b05dda": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 90,
          "y": 480
        },
        "z": 1,
        "embeds": [],
        "dependson": ["0b630a3e-8b47-4876-bc52-7b0c367e0c8f"]
      },
      "e9c77833-dd43-47ab-86c9-e99c6a6cd34a": {
        "source": {
          "id": "0b630a3e-8b47-4876-bc52-7b0c367e0c8f"
        },
        "target": {
          "id": "e5d473f6-1ff8-4f9b-89e6-723978b05dda"
        },
        "z": 1
      },
      "ff48ecc5-209e-49a4-9e81-602253cc6e8e": {
        "size": {
          "width": 320,
          "height": 170
        },
        "position": {
          "x": 870,
          "y": 390
        },
        "z": 2,
        "parent": "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
        "embeds": ["7ac1f66d-0463-4b9c-a840-6cdb8a562d7a"],
        "dependson": ["0b630a3e-8b47-4876-bc52-7b0c367e0c8f"]
      },
      "7ac1f66d-0463-4b9c-a840-6cdb8a562d7a": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 1100,
          "y": 430
        },
        "z": 3,
        "parent": "ff48ecc5-209e-49a4-9e81-602253cc6e8e",
        "embeds": [],
        "dependson": [
          "e9c77833-dd43-47ab-86c9-e99c6a6cd34a",
          "ff48ecc5-209e-49a4-9e81-602253cc6e8e",
          "e5d473f6-1ff8-4f9b-89e6-723978b05dda"
        ]
      },
      "6d87f156-f7b4-4d24-82bb-824b67d056c9": {
        "source": {
          "id": "ff48ecc5-209e-49a4-9e81-602253cc6e8e"
        },
        "target": {
          "id": "7d748840-94c2-409e-a76b-e68d416e46bf"
        },
        "z": 2
      },
      "829c36b5-fc86-4dc7-8cf1-9a9c84bd5151": {
        "size": {
          "width": 330,
          "height": 180
        },
        "position": {
          "x": 870,
          "y": 150
        },
        "z": 2,
        "parent": "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
        "embeds": [],
        "dependson": ["0b630a3e-8b47-4876-bc52-7b0c367e0c8f"]
      },
      "b5b0775b-3d32-40f8-a6bf-c2b0455895d6": {
        "size": {
          "width": 330,
          "height": 180
        },
        "position": {
          "x": 450,
          "y": 390
        },
        "z": 2,
        "parent": "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
        "embeds": [],
        "dependson": ["0b630a3e-8b47-4876-bc52-7b0c367e0c8f"]
      },
      "1bd90a7c-409f-4ae2-a8ea-884184de0a15": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 1380,
          "y": 840
        },
        "z": 2,
        "parent": "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
        "embeds": [],
        "dependson": ["0b630a3e-8b47-4876-bc52-7b0c367e0c8f"]
      },
      "5bc5d03a-a523-4c79-a0da-a84c6f65ed7d": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 1380,
          "y": 630
        },
        "z": 2,
        "parent": "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
        "embeds": [],
        "iscontainedinside": [
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f"
        ]
      },
      "06906175-e554-4768-8cb5-547401eceadd": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 1380,
          "y": 720
        },
        "z": 2,
        "parent": "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
        "embeds": [],
        "dependson": ["0b630a3e-8b47-4876-bc52-7b0c367e0c8f"]
      },
      "6e6d3b3c-624a-4849-a78c-f9f28a5e0b74": {
        "source": {
          "id": "ff48ecc5-209e-49a4-9e81-602253cc6e8e"
        },
        "target": {
          "id": "829c36b5-fc86-4dc7-8cf1-9a9c84bd5151"
        },
        "z": 2
      },
      "cd0e7912-d672-4611-8b90-2a84250ccb3e": {
        "source": {
          "id": "ff48ecc5-209e-49a4-9e81-602253cc6e8e"
        },
        "target": {
          "id": "b5b0775b-3d32-40f8-a6bf-c2b0455895d6"
        },
        "z": 2
      },
      "28272b0f-5582-4714-81c8-5358e0f9e2b3": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 330,
          "y": 630
        },
        "z": 1,
        "embeds": [],
        "isassociatedwith": ["5ddc92d7-fa7c-41d4-a827-625da8863891"]
      },
      "625bcd3e-aad4-4185-9d38-eaaa609b01f2": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 960,
          "y": 900
        },
        "z": 2,
        "parent": "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
        "embeds": [],
        "dependson": ["be37df0b-c7dd-47c1-8dcf-ff93660fe32f"]
      },
      "5ddc92d7-fa7c-41d4-a827-625da8863891": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 960,
          "y": 990
        },
        "z": 2,
        "parent": "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
        "embeds": [],
        "iscontainedinside": [
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f"
        ]
      },
      "117d008d-7b69-4c5c-9fbd-fc3893e18896": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 810,
          "y": 990
        },
        "z": 2,
        "parent": "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
        "embeds": [],
        "dependson": ["be37df0b-c7dd-47c1-8dcf-ff93660fe32f"]
      },
      "be37df0b-c7dd-47c1-8dcf-ff93660fe32f": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 120,
          "y": 630
        },
        "z": 1,
        "embeds": [],
        "dependson": [
          "e9c77833-dd43-47ab-86c9-e99c6a6cd34a",
          "7d748840-94c2-409e-a76b-e68d416e46bf",
          "b5b0775b-3d32-40f8-a6bf-c2b0455895d6",
          "829c36b5-fc86-4dc7-8cf1-9a9c84bd5151",
          "d780bac1-56c2-425e-a534-a3f55f40e397"
        ]
      },
      "d780bac1-56c2-425e-a534-a3f55f40e397": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 1380,
          "y": 940
        },
        "z": 2,
        "parent": "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
        "embeds": [],
        "iscontainedinside": [
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
          "0b630a3e-8b47-4876-bc52-7b0c367e0c8f"
        ]
      },
      "283b0e4e-10b4-4eb1-aaa2-5b36bb60fcdf": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 360,
          "y": 1140
        },
        "z": 1,
        "embeds": [],
        "dependson": ["be37df0b-c7dd-47c1-8dcf-ff93660fe32f"]
      },
      "16396153-4927-4034-b268-2193b423a0f6": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 520,
          "y": 1140
        },
        "z": 1,
        "embeds": [],
        "dependson": ["98a59bfc-c0f5-4519-8113-09fbd0af754d"]
      },
      "98a59bfc-c0f5-4519-8113-09fbd0af754d": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 450,
          "y": 1250
        },
        "z": 1,
        "embeds": []
      },
      "27392f87-6ffd-40af-89fb-9172209cf6c0": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 600,
          "y": 1250
        },
        "z": 1,
        "embeds": []
      },
      "06c73e42-4273-413b-bab5-035a161da893": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 20,
          "y": 1050
        },
        "z": 1,
        "embeds": [],
        "dependson": ["98a59bfc-c0f5-4519-8113-09fbd0af754d"]
      },
      "24683055-1243-4899-939e-cbd5cc09ae0b": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 120,
          "y": 1050
        },
        "z": 1,
        "embeds": [],
        "dependson": ["27392f87-6ffd-40af-89fb-9172209cf6c0"]
      },
      "8dd76f4a-5ebb-4a4c-9242-a5cdabbfe152": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 680,
          "y": 1140
        },
        "z": 1,
        "embeds": [],
        "dependson": ["27392f87-6ffd-40af-89fb-9172209cf6c0"]
      },
      "6eb0cfdc-e10b-4cd4-9b5d-c7b171979bf2": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 830,
          "y": 1140
        },
        "z": 1,
        "embeds": [],
        "dependson": [
          "98a59bfc-c0f5-4519-8113-09fbd0af754d",
          "27392f87-6ffd-40af-89fb-9172209cf6c0"
        ]
      },
      "4b6d2d78-df91-4118-b6fc-dd4c1af76541": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 1000,
          "y": 1140
        },
        "z": 0,
        "embeds": [],
        "dependson": ["98a59bfc-c0f5-4519-8113-09fbd0af754d"]
      },
      "fe3a8fae-207b-4572-a7ce-ceb5c2e142bf": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 330,
          "y": 730
        },
        "z": 0,
        "embeds": []
      },
      "900054dc-3593-4ce2-b356-79b07966625d": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 1070,
          "y": 900
        },
        "z": 2,
        "parent": "0b630a3e-8b47-4876-bc52-7b0c367e0c8f",
        "embeds": [],
        "dependson": ["28272b0f-5582-4714-81c8-5358e0f9e2b3"]
      },
      "6b66d60d-56d9-406a-b600-33296a063761": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 1170,
          "y": 1140
        },
        "z": 0,
        "embeds": [],
        "dependson": [
          "98a59bfc-c0f5-4519-8113-09fbd0af754d",
          "27392f87-6ffd-40af-89fb-9172209cf6c0"
        ]
      },
      "4e46353f-ccd4-4e79-a158-3121a058fa84": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 1340,
          "y": 1140
        },
        "z": 0,
        "embeds": [],
        "dependson": [
          "98a59bfc-c0f5-4519-8113-09fbd0af754d",
          "27392f87-6ffd-40af-89fb-9172209cf6c0"
        ]
      },
      "655088dc-bc71-4a09-89d4-b9ab846bdaac": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 1090,
          "y": 1250
        },
        "z": 0,
        "embeds": [],
        "isassociatedwith": ["fe3a8fae-207b-4572-a7ce-ceb5c2e142bf"]
      },
      "c6a3ee0d-6184-4835-92fc-9889822c2580": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 910,
          "y": 1250
        },
        "z": 0,
        "embeds": [],
        "isassociatedwith": ["28272b0f-5582-4714-81c8-5358e0f9e2b3"]
      },
      "f94671de-f192-42e3-b5dc-fbdeeba0ddb0": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 1480,
          "y": 1140
        },
        "z": 0,
        "embeds": [],
        "dependson": [
          "98a59bfc-c0f5-4519-8113-09fbd0af754d",
          "27392f87-6ffd-40af-89fb-9172209cf6c0"
        ]
      },
      "59c99d1b-fb27-4c43-bb24-e021a6d81876": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 1580,
          "y": 930
        },
        "z": 0,
        "embeds": []
      },
      "87c898bf-cdd3-4757-abf5-d39b49fbc4c7": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 1250,
          "y": 1250
        },
        "z": 0,
        "embeds": [],
        "dependson": [
          "98a59bfc-c0f5-4519-8113-09fbd0af754d",
          "27392f87-6ffd-40af-89fb-9172209cf6c0"
        ]
      },
      "d50d8804-4d8d-43d2-a9d5-ab0919dca701": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 1410,
          "y": 1250
        },
        "z": 0,
        "embeds": []
      }
    }
  },
  "Parameters": {
    "ManagerInstanceType": {
      "Description": "Docker Swarm Manager EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t1.micro",
        "t2.nano",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "t3.nano",
        "t3.micro",
        "t3.small",
        "t3.medium",
        "t3.large",
        "t3.xlarge",
        "t3.2xlarge",
        "t3a.nano",
        "t3a.micro",
        "t3a.small",
        "t3a.medium",
        "t3a.large",
        "t3a.xlarge",
        "t3a.2xlarge",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c1.medium",
        "c1.xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "g2.2xlarge",
        "g2.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "cr1.8xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "WorkerInstanceType": {
      "Description": "Docker Swarm Worker EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t1.micro",
        "t2.nano",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "t3.nano",
        "t3.micro",
        "t3.small",
        "t3.medium",
        "t3.large",
        "t3.xlarge",
        "t3.2xlarge",
        "t3a.nano",
        "t3a.micro",
        "t3a.small",
        "t3a.medium",
        "t3a.large",
        "t3a.xlarge",
        "t3a.2xlarge",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "KeyName": {
      "Description": "Name of an EC2 KeyPair to enable SSH access to the instance.",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "SSHLocation": {
      "Description": " The IP address range that can be used to access the web server using SSH.",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "ClusterSize": {
      "Default": "0",
      "Description": "Number of worker nodes in the Swarm (0-100).",
      "MaxValue": "100",
      "MinValue": "0",
      "Type": "Number"
    },
    "EnableCloudWatchLogs": {
      "AllowedValues": ["no", "yes"],
      "Default": "yes",
      "Description": "Send all Container logs to CloudWatch",
      "Type": "String"
    },
    "EnableSystemPrune": {
      "AllowedValues": ["no", "yes"],
      "Default": "no",
      "Description": "Cleans up unused images, containers, networks and volumes",
      "Type": "String"
    },
    "ManagerDiskSize": {
      "Default": "20",
      "Description": "Size of Manager's ephemeral storage volume in GiB",
      "MaxValue": "1024",
      "MinValue": "20",
      "Type": "Number"
    },
    "ManagerSize": {
      "AllowedValues": ["1", "3", "5"],
      "Default": "1",
      "Description": "Number of Swarm manager nodes (1, 3, 5)",
      "Type": "Number"
    },
    "WorkerDiskSize": {
      "Default": "20",
      "Description": "Size of Workers's ephemeral storage volume in GiB",
      "MaxValue": "1024",
      "MinValue": "20",
      "Type": "Number"
    }
  },
  "Mappings": {
    "AWSInstanceType2Arch": {
      "t1.micro": {
        "Arch": "HVM64"
      },
      "t2.nano": {
        "Arch": "HVM64"
      },
      "t2.micro": {
        "Arch": "HVM64"
      },
      "t2.small": {
        "Arch": "HVM64"
      },
      "t2.medium": {
        "Arch": "HVM64"
      },
      "t2.large": {
        "Arch": "HVM64"
      },
      "t3a.nano": {
        "Arch": "HVM64"
      },
      "t3.micro": {
        "Arch": "HVM64"
      },
      "t3.small": {
        "Arch": "HVM64"
      },
      "t3.medium": {
        "Arch": "HVM64"
      },
      "t3.large": {
        "Arch": "HVM64"
      },
      "t3.xlarge": {
        "Arch": "HVM64"
      },
      "t3.2xlarge": {
        "Arch": "HVM64"
      },
      "t3a.micro": {
        "Arch": "HVM64"
      },
      "t3a.small": {
        "Arch": "HVM64"
      },
      "t3a.medium": {
        "Arch": "HVM64"
      },
      "t3a.large": {
        "Arch": "HVM64"
      },
      "t3a.xlarge": {
        "Arch": "HVM64"
      },
      "t3a.2xlarge": {
        "Arch": "HVM64"
      },
      "m1.small": {
        "Arch": "HVM64"
      },
      "m1.medium": {
        "Arch": "HVM64"
      },
      "m1.large": {
        "Arch": "HVM64"
      },
      "m1.xlarge": {
        "Arch": "HVM64"
      },
      "m2.xlarge": {
        "Arch": "HVM64"
      },
      "m2.2xlarge": {
        "Arch": "HVM64"
      },
      "m2.4xlarge": {
        "Arch": "HVM64"
      },
      "m3.medium": {
        "Arch": "HVM64"
      },
      "m3.large": {
        "Arch": "HVM64"
      },
      "m3.xlarge": {
        "Arch": "HVM64"
      },
      "m3.2xlarge": {
        "Arch": "HVM64"
      },
      "m4.large": {
        "Arch": "HVM64"
      },
      "m4.xlarge": {
        "Arch": "HVM64"
      },
      "m4.2xlarge": {
        "Arch": "HVM64"
      },
      "m4.4xlarge": {
        "Arch": "HVM64"
      },
      "m4.10xlarge": {
        "Arch": "HVM64"
      }
    },
    "AWSRegion2AZ": {
      "ap-northeast-1": {
        "AZ0": "0",
        "AZ1": "1",
        "AZ2": "0",
        "EFSSupport": "no",
        "LambdaSupport": "yes",
        "Name": "Tokyo",
        "NumAZs": "2"
      },
      "ap-northeast-2": {
        "AZ0": "0",
        "AZ1": "1",
        "AZ2": "0",
        "EFSSupport": "no",
        "LambdaSupport": "yes",
        "Name": "Seoul",
        "NumAZs": "2"
      },
      "ap-south-1": {
        "AZ0": "0",
        "AZ1": "1",
        "AZ2": "0",
        "EFSSupport": "no",
        "LambdaSupport": "yes",
        "Name": "Mumbai",
        "NumAZs": "2"
      },
      "ap-southeast-1": {
        "AZ0": "0",
        "AZ1": "1",
        "AZ2": "0",
        "EFSSupport": "no",
        "LambdaSupport": "yes",
        "Name": "Singapore",
        "NumAZs": "2"
      },
      "ap-southeast-2": {
        "AZ0": "0",
        "AZ1": "1",
        "AZ2": "2",
        "EFSSupport": "yes",
        "LambdaSupport": "yes",
        "Name": "Sydney",
        "NumAZs": "3"
      },
      "ca-central-1": {
        "AZ0": "0",
        "AZ1": "1",
        "AZ2": "0",
        "EFSSupport": "no",
        "LambdaSupport": "no",
        "Name": "Central",
        "NumAZs": "2"
      },
      "eu-central-1": {
        "AZ0": "0",
        "AZ1": "1",
        "AZ2": "2",
        "EFSSupport": "yes",
        "LambdaSupport": "yes",
        "Name": "Frankfurt",
        "NumAZs": "3"
      },
      "eu-west-1": {
        "AZ0": "0",
        "AZ1": "1",
        "AZ2": "2",
        "EFSSupport": "yes",
        "LambdaSupport": "yes",
        "Name": "Ireland",
        "NumAZs": "3"
      },
      "eu-west-2": {
        "AZ0": "0",
        "AZ1": "1",
        "AZ2": "0",
        "EFSSupport": "no",
        "LambdaSupport": "yes",
        "Name": "London",
        "NumAZs": "2"
      },
      "sa-east-1": {
        "AZ0": "0",
        "AZ1": "1",
        "AZ2": "0",
        "EFSSupport": "no",
        "LambdaSupport": "no",
        "Name": "Sao Paulo",
        "NumAZs": "2"
      },
      "us-east-1": {
        "AZ0": "0",
        "AZ1": "1",
        "AZ2": "2",
        "EFSSupport": "yes",
        "LambdaSupport": "yes",
        "Name": "N. Virgina",
        "NumAZs": "4"
      },
      "us-east-2": {
        "AZ0": "0",
        "AZ1": "1",
        "AZ2": "2",
        "EFSSupport": "yes",
        "LambdaSupport": "yes",
        "Name": "Ohio",
        "NumAZs": "3"
      },
      "us-gov-west-1": {
        "AZ0": "0",
        "AZ1": "1",
        "AZ2": "0",
        "EFSSupport": "no",
        "LambdaSupport": "no",
        "Name": "GovCloud",
        "NumAZs": "2"
      },
      "us-west-1": {
        "AZ0": "0",
        "AZ1": "1",
        "AZ2": "0",
        "EFSSupport": "no",
        "LambdaSupport": "yes",
        "Name": "N. California",
        "NumAZs": "2"
      },
      "us-west-2": {
        "AZ0": "0",
        "AZ1": "1",
        "AZ2": "2",
        "EFSSupport": "yes",
        "LambdaSupport": "yes",
        "Name": "Oregon",
        "NumAZs": "3"
      }
    },
    "AWSRegionArch2AMI": {
      "us-east-1": {
        "HVM64": "ami-04b9e92b5572fa0d1",
        "HVMG2": "NOT_SUPPORTED"
      },
      "us-east-2": {
        "HVM64": "ami-0a7f2b5b6b87eaa1b",
        "HVMG2": "NOT_SUPPORTED"
      },
      "us-west-2": {
        "HVM64": "ami-09c6723c6c24250c9",
        "HVMG2": "NOT_SUPPORTED"
      },
      "us-west-1": {
        "HVM64": "ami-00a3e4424e9ab3e56",
        "HVMG2": "NOT_SUPPORTED"
      },
      "eu-west-1": {
        "HVM64": "ami-0e41581acd7dedd99",
        "HVMG2": "NOT_SUPPORTED"
      },
      "eu-west-2": {
        "HVM64": "ami-00f94dc949fea2adf",
        "HVMG2": "NOT_SUPPORTED"
      },
      "eu-west-3": {
        "HVM64": "ami-0df03c7641cf41947",
        "HVMG2": "NOT_SUPPORTED"
      },
      "eu-central-1": {
        "HVM64": "ami-040a1551f9c9d11ad",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ap-northeast-1": {
        "HVM64": "ami-0d5db3e2a1b98ca94",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ap-northeast-2": {
        "HVM64": "ami-0f4362c71ffaf7759",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ap-northeast-3": {
        "HVM64": "ami-07672d9af3947230d",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ap-southeast-1": {
        "HVM64": "ami-0c199cae95cea87f0",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ap-southeast-2": {
        "HVM64": "ami-0c0483bc96aef8b2f",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ap-south-1": {
        "HVM64": "ami-0237472cf337d9529",
        "HVMG2": "NOT_SUPPORTED"
      },
      "ca-central-1": {
        "HVM64": "ami-0dbe45195223e250b",
        "HVMG2": "NOT_SUPPORTED"
      },
      "sa-east-1": {
        "HVM64": "ami-0065a65613972a22a",
        "HVMG2": "NOT_SUPPORTED"
      },
      "cn-north-1": {
        "HVM64": "ami-01993b4213b4bffb5",
        "HVMG2": "NOT_SUPPORTED"
      },
      "cn-northwest-1": {
        "HVM64": "ami-01d4e30d4d4952d0f",
        "HVMG2": "NOT_SUPPORTED"
      }
    },
    "VpcCidrs": {
      "pubsubnet1": {
        "cidr": "10.0.0.0/20"
      },
      "pubsubnet2": {
        "cidr": "10.0.16.0/20"
      },
      "pubsubnet3": {
        "cidr": "10.0.32.0/20"
      },
      "pubsubnet4": {
        "cidr": "10.0.48.0/20"
      },
      "vpc": {
        "cidr": "10.0.0.0/16"
      }
    },
    "DockerEnvironment": {
      "version": {
        "HasDDC": "no",
        "addOn": "base",
        "channel": "stable",
        "docker": "19.03.4-ce",
        "install": "5:19.03.4~3-0~ubuntu-bionic"
      }
    }
  },
  "Outputs": {
    "DefaultDNSTarget": {
      "Description": "Use this name to update your DNS records",
      "Value": {
        "Fn::GetAtt": ["ApplicationLoadBalancer", "DNSName"]
      }
    },
    "ManagerSecurityGroupID": {
      "Description": "SecurityGroup ID of ManagerVpcSG",
      "Value": {
        "Ref": "ManagerVpcSG"
      }
    },
    "Managers": {
      "Description": "You can see the manager nodes associated with this cluster here. Follow the instructions here: https://docs.docker.com/docker-for-aws/deploy/",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "AWS::Region"
            },
            ".console.aws.amazon.com/ec2/v2/home?region=",
            {
              "Ref": "AWS::Region"
            },
            "#Instances:tag:aws:autoscaling:groupName=",
            {
              "Ref": "ManagerAsg"
            },
            ";sort=desc:dnsName"
          ]
        ]
      }
    },
    "SwarmWideSecurityGroupID": {
      "Description": "SecurityGroup ID of SwarmWideSG",
      "Value": {
        "Ref": "SwarmWideSG"
      }
    },
    "VPCID": {
      "Description": "Use this as the VPC for configuring Private Hosted Zones",
      "Value": {
        "Ref": "Vpc"
      }
    },
    "ZoneAvailabilityComment": {
      "Description": "Availabilty Zones Comment",
      "Value": {
        "Fn::If": [
          "HasOnly2AZs",
          "This region only has 2 Availabiliy Zones (AZ). If one of those AZs goes away, it will cause problems for your Swarm Managers. Please use a Region with at least 3 AZs.",
          "This region has at least 3 Availability Zones (AZ). This is ideal to ensure a fully functional Swarm in case you lose an AZ."
        ]
      }
    }
  },
  "Resources": {
    "AttachGateway": {
      "DependsOn": ["Vpc", "InternetGateway"],
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "e9c77833-dd43-47ab-86c9-e99c6a6cd34a"
        }
      }
    },
    "InternetGateway": {
      "DependsOn": "Vpc",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "IGW"
                ]
              ]
            }
          }
        ]
      },
      "Type": "AWS::EC2::InternetGateway",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "e5d473f6-1ff8-4f9b-89e6-723978b05dda"
        }
      }
    },
    "ManagerVpcSG": {
      "DependsOn": "NodeVpcSG",
      "Properties": {
        "GroupDescription": "Manager SecurityGroup",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "22",
            "IpProtocol": "tcp",
            "ToPort": "22"
          },
          {
            "IpProtocol": "50",
            "SourceSecurityGroupId": {
              "Fn::GetAtt": ["NodeVpcSG", "GroupId"]
            }
          },
          {
            "FromPort": "2377",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Fn::GetAtt": ["NodeVpcSG", "GroupId"]
            },
            "ToPort": "2377"
          },
          {
            "FromPort": "4789",
            "IpProtocol": "udp",
            "SourceSecurityGroupId": {
              "Fn::GetAtt": ["NodeVpcSG", "GroupId"]
            },
            "ToPort": "4789"
          },
          {
            "FromPort": "7946",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Fn::GetAtt": ["NodeVpcSG", "GroupId"]
            },
            "ToPort": "7946"
          },
          {
            "FromPort": "7946",
            "IpProtocol": "udp",
            "SourceSecurityGroupId": {
              "Fn::GetAtt": ["NodeVpcSG", "GroupId"]
            },
            "ToPort": "7946"
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::SecurityGroup",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "5bc5d03a-a523-4c79-a0da-a84c6f65ed7d"
        }
      }
    },
    "NodeVpcSG": {
      "DependsOn": "Vpc",
      "Properties": {
        "GroupDescription": "Node SecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "8",
            "IpProtocol": "icmp",
            "ToPort": "0"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "50"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "IpProtocol": "udp",
            "ToPort": "65535"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "0",
            "IpProtocol": "tcp",
            "ToPort": "2374"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "2376",
            "IpProtocol": "tcp",
            "ToPort": "65535"
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": {
              "Fn::FindInMap": ["VpcCidrs", "vpc", "cidr"]
            },
            "FromPort": "0",
            "IpProtocol": "-1",
            "ToPort": "65535"
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::SecurityGroup",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "06906175-e554-4768-8cb5-547401eceadd"
        }
      }
    },
    "PubSubnet1RouteTableAssociation": {
      "DependsOn": ["PubSubnetAz1", "RouteViaIgw"],
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteViaIgw"
        },
        "SubnetId": {
          "Ref": "PubSubnetAz1"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "6d87f156-f7b4-4d24-82bb-824b67d056c9"
        }
      }
    },
    "PubSubnet2RouteTableAssociation": {
      "DependsOn": ["PubSubnetAz2", "RouteViaIgw"],
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteViaIgw"
        },
        "SubnetId": {
          "Ref": "PubSubnetAz2"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "6e6d3b3c-624a-4849-a78c-f9f28a5e0b74"
        }
      }
    },
    "PubSubnet3RouteTableAssociation": {
      "DependsOn": ["PubSubnetAz3", "RouteViaIgw"],
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteViaIgw"
        },
        "SubnetId": {
          "Ref": "PubSubnetAz3"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "cd0e7912-d672-4611-8b90-2a84250ccb3e"
        }
      }
    },
    "PubSubnetAz1": {
      "DependsOn": ["Vpc"],
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            {
              "Fn::FindInMap": [
                "AWSRegion2AZ",
                {
                  "Ref": "AWS::Region"
                },
                "AZ0"
              ]
            },
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "CidrBlock": {
          "Fn::FindInMap": ["VpcCidrs", "pubsubnet1", "cidr"]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Subnet1"
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::Subnet",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "7d748840-94c2-409e-a76b-e68d416e46bf"
        }
      }
    },
    "PubSubnetAz2": {
      "DependsOn": ["Vpc"],
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            {
              "Fn::FindInMap": [
                "AWSRegion2AZ",
                {
                  "Ref": "AWS::Region"
                },
                "AZ1"
              ]
            },
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "CidrBlock": {
          "Fn::FindInMap": ["VpcCidrs", "pubsubnet2", "cidr"]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Subnet2"
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::Subnet",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "829c36b5-fc86-4dc7-8cf1-9a9c84bd5151"
        }
      }
    },
    "PubSubnetAz3": {
      "DependsOn": ["Vpc"],
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            {
              "Fn::FindInMap": [
                "AWSRegion2AZ",
                {
                  "Ref": "AWS::Region"
                },
                "AZ2"
              ]
            },
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "CidrBlock": {
          "Fn::FindInMap": ["VpcCidrs", "pubsubnet3", "cidr"]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Subnet3"
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::Subnet",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "b5b0775b-3d32-40f8-a6bf-c2b0455895d6"
        }
      }
    },
    "PublicRouteViaIgw": {
      "DependsOn": ["AttachGateway", "RouteViaIgw", "InternetGateway"],
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "RouteViaIgw"
        },
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      },
      "Type": "AWS::EC2::Route",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "7ac1f66d-0463-4b9c-a840-6cdb8a562d7a"
        }
      }
    },
    "RouteViaIgw": {
      "DependsOn": ["Vpc"],
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "RouteTable"
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::RouteTable",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "ff48ecc5-209e-49a4-9e81-602253cc6e8e"
        }
      }
    },
    "SwarmWideSG": {
      "DependsOn": "Vpc",
      "Properties": {
        "GroupDescription": "Swarm wide access",
        "SecurityGroupIngress": [
          {
            "CidrIp": {
              "Fn::FindInMap": ["VpcCidrs", "vpc", "cidr"]
            },
            "FromPort": "0",
            "IpProtocol": "-1",
            "ToPort": "65535"
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::SecurityGroup",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "1bd90a7c-409f-4ae2-a8ea-884184de0a15"
        }
      }
    },
    "Vpc": {
      "Properties": {
        "CidrBlock": {
          "Fn::FindInMap": ["VpcCidrs", "vpc", "cidr"]
        },
        "EnableDnsHostnames": "true",
        "EnableDnsSupport": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "VPC"
                ]
              ]
            }
          }
        ]
      },
      "Type": "AWS::EC2::VPC",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "0b630a3e-8b47-4876-bc52-7b0c367e0c8f"
        }
      }
    },
    "ManagerAsg": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": {
            "Ref": "ManagerSize"
          },
          "Timeout": "PT20M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": "1",
          "MinInstancesInService": {
            "Ref": "ManagerSize"
          },
          "PauseTime": "PT20M",
          "WaitOnResourceSignals": "true"
        }
      },
      "Properties": {
        "AutoScalingGroupName": "Manager AutoScaling Group",
        "DesiredCapacity": {
          "Ref": "ManagerSize"
        },
        "LaunchTemplate": {
          "LaunchTemplateId": {
            "Ref": "ManagerLaunchTemplate"
          },
          "Version": {
            "Fn::GetAtt": ["ManagerLaunchTemplate", "LatestVersionNumber"]
          }
        },
        "TargetGroupARNs": [
          {
            "Ref": "ApplicationLoadBalancerTargetGroup"
          }
        ],
        "MinSize": 1,
        "MaxSize": 5,
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Manager"
                ]
              ]
            }
          },
          {
            "Key": "swarm-node-type",
            "PropagateAtLaunch": true,
            "Value": "manager"
          },
          {
            "Key": "swarm-stack-id",
            "PropagateAtLaunch": true,
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "DOCKER_VERSION",
            "PropagateAtLaunch": true,
            "Value": {
              "Fn::FindInMap": ["DockerEnvironment", "version", "install"]
            }
          },
          {
            "Key": "ENVIRONMENT",
            "PropagateAtLaunch": true,
            "Value": "production"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Fn::If": [
              "HasOnly2AZs",
              {
                "Fn::Join": [
                  ",",
                  [
                    {
                      "Ref": "PubSubnetAz1"
                    },
                    {
                      "Ref": "PubSubnetAz2"
                    }
                  ]
                ]
              },
              {
                "Fn::Join": [
                  ",",
                  [
                    {
                      "Ref": "PubSubnetAz1"
                    },
                    {
                      "Ref": "PubSubnetAz2"
                    },
                    {
                      "Ref": "PubSubnetAz3"
                    }
                  ]
                ]
              }
            ]
          }
        ]
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "28272b0f-5582-4714-81c8-5358e0f9e2b3"
        }
      }
    },
    "ManagerLaunchTemplate": {
      "DependsOn": "ApplicationLoadBalancer",
      "Type": "AWS::EC2::LaunchTemplate",
      "Properties": {
        "LaunchTemplateData": {
          "BlockDeviceMappings": [
            {
              "DeviceName": "/dev/sda1",
              "Ebs": {
                "Encrypted": "true",
                "VolumeSize": {
                  "Ref": "ManagerDiskSize"
                },
                "VolumeType": "gp2"
              }
            }
          ],
          "EbsOptimized": "false",
          "IamInstanceProfile": {
            "Arn": {
              "Fn::GetAtt": ["ManagerInstanceProfile", "Arn"]
            }
          },
          "ImageId": {
            "Fn::FindInMap": [
              "AWSRegionArch2AMI",
              {
                "Ref": "AWS::Region"
              },
              {
                "Fn::FindInMap": [
                  "AWSInstanceType2Arch",
                  {
                    "Ref": "ManagerInstanceType"
                  },
                  "Arch"
                ]
              }
            ]
          },
          "InstanceType": {
            "Ref": "ManagerInstanceType"
          },
          "KeyName": {
            "Ref": "KeyName"
          },
          "NetworkInterfaces": [
            {
              "AssociatePublicIpAddress": "true",
              "DeleteOnTermination": "true",
              "DeviceIndex": 0,
              "Groups": [
                {
                  "Ref": "ManagerVpcSG"
                },
                {
                  "Ref": "SwarmWideSG"
                }
              ]
            }
          ],
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "#!/bin/bash -xe\n",
                  "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n",
                  "apt-get update\n",
                  "apt-get -y install python-pip\n",
                  "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                  "cfn-init -v --resource ManagerAsg",
                  " --stack ",
                  {
                    "Ref": "AWS::StackName"
                  },
                  " --region ",
                  {
                    "Ref": "AWS::Region"
                  },
                  "\n",
                  "# variable\n",
                  "export LOCAL_IP=$(wget -qO- http://169.254.169.254/latest/meta-data/local-ipv4)\n",
                  "export INSTANCE_TYPE=$(wget -qO- http://169.254.169.254/latest/meta-data/instance-type)\n",
                  "export NODE_AZ=$(wget -qO- http://169.254.169.254/latest/meta-data/placement/availability-zone/)\n",
                  "export REGION=$(echo $NODE_AZ | sed 's/.$//')\n",
                  "export ENABLE_CLOUDWATCH_LOGS='",
                  {
                    "Ref": "EnableCloudWatchLogs"
                  },
                  "'\n",
                  "export DOCKER_VERSION='",
                  {
                    "Fn::FindInMap": ["DockerEnvironment", "version", "install"]
                  },
                  "'\n",
                  "export AWS_REGION='",
                  {
                    "Ref": "AWS::Region"
                  },
                  "'\n",
                  "export MANAGER_SECURITY_GROUP_ID='",
                  {
                    "Ref": "ManagerVpcSG"
                  },
                  "'\n",
                  "export WORKER_SECURITY_GROUP_ID='",
                  {
                    "Ref": "NodeVpcSG"
                  },
                  "'\n",
                  "export DYNAMODB_TABLE='",
                  {
                    "Ref": "SwarmDynDBTable"
                  },
                  "'\n",
                  "export STACK_NAME='",
                  {
                    "Ref": "AWS::StackName"
                  },
                  "'\n",
                  "export STACK_ID='",
                  {
                    "Ref": "AWS::StackId"
                  },
                  "'\n",
                  "export ACCOUNT_ID='",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  "'\n",
                  "export VPC_ID='",
                  {
                    "Ref": "Vpc"
                  },
                  "'\n",
                  "export LIFECYCLE_QUEUE='",
                  {
                    "Ref": "SwarmSQS"
                  },
                  "'\n",
                  "export RUN_VACUUM='",
                  {
                    "Ref": "EnableSystemPrune"
                  },
                  "'\n",
                  "export LOG_GROUP_NAME='",
                  {
                    "Fn::Join": [
                      "-",
                      [
                        {
                          "Ref": "AWS::StackName"
                        },
                        "lg"
                      ]
                    ]
                  },
                  "'\n",
                  "# remove history",
                  "\n",
                  "echo 'unset HISTFILE' >> /home/ubuntu/.bashrc\n",
                  "echo 'export LESSHISTFILE=\"-\"' >> /home/ubuntu/.bashrc\n",
                  "history -c\n",
                  "# Install docker and bash shortcuts",
                  "\n",
                  "apt-get update\n",
                  "apt-get -y install apt-transport-https ca-certificates curl gnupg-agent software-properties-common\n",
                  "curl -L https://gist.github.com/natac13/1669066880bd89489de27ed9a8b2e760/raw >> /home/ubuntu/.bash_aliases\n",
                  "source /home/ubuntu/.bashrc\n",
                  "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -\n",
                  "apt-key fingerprint 0EBFCD88\n",
                  "add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n",
                  "apt-get update\n",
                  "apt-get install -y docker-ce=$DOCKER_VERSION\n",
                  "usermod -aG docker ubuntu\n",
                  "# init-aws\n",
                  "docker run --restart=no --log-driver=json-file -d -e DYNAMODB_TABLE=$DYNAMODB_TABLE -v /var/run/docker.sock:/var/run/docker.sock natac13/docker-swarm-init-aws",
                  "\n",
                  "docker run --restart=always -d -e DYNAMODB_TABLE=$DYNAMODB_TABLE -e LIFECYCLE_QUEUE=$LIFECYCLE_QUEUE -e RUN_VACUUM=$RUN_VACUUM -v /var/run/docker.sock:/var/run/docker.sock -v /var/log:/var/log natac13/docker-swarm-guide-aws",
                  "\n",
                  "cfn-signal -e $? --resource ManagerAsg",
                  " --stack ",
                  {
                    "Ref": "AWS::StackName"
                  },
                  " --region ",
                  {
                    "Ref": "AWS::Region"
                  }
                ]
              ]
            }
          }
        },
        "LaunchTemplateName": "ManagerLaunchTemplate"
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "625bcd3e-aad4-4185-9d38-eaaa609b01f2"
        }
      }
    },
    "ApplicationLoadBalancerTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": 300,
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 3,
        "Port": 80,
        "Protocol": "HTTP",
        "UnhealthyThresholdCount": 5,
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "5ddc92d7-fa7c-41d4-a827-625da8863891"
        }
      }
    },
    "ApplicationLoadBalancerSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "GroupDescription": "Enable SSH access and HTTP access on the configured port",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "d780bac1-56c2-425e-a534-a3f55f40e397"
        }
      }
    },
    "ApplicationLoadBalancerListener": {
      "DependsOn": ["ApplicationLoadBalancer"],
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "LoadBalancerArn": {
          "Ref": "ApplicationLoadBalancer"
        },
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "ApplicationLoadBalancerTargetGroup"
            }
          }
        ],
        "Port": "80",
        "Protocol": "HTTP"
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "117d008d-7b69-4c5c-9fbd-fc3893e18896"
        }
      }
    },
    "ApplicationLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Type": "application",
        "SecurityGroups": [
          {
            "Ref": "ApplicationLoadBalancerSG"
          }
        ],
        "Subnets": {
          "Fn::If": [
            "HasOnly2AZs",
            [
              {
                "Ref": "PubSubnetAz1"
              },
              {
                "Ref": "PubSubnetAz2"
              }
            ],
            [
              {
                "Ref": "PubSubnetAz1"
              },
              {
                "Ref": "PubSubnetAz2"
              },
              {
                "Ref": "PubSubnetAz3"
              }
            ]
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "ELB"
                ]
              ]
            }
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "be37df0b-c7dd-47c1-8dcf-ff93660fe32f"
        }
      },
      "DependsOn": [
        "PubSubnetAz1",
        "PubSubnetAz3",
        "PubSubnetAz2",
        "ApplicationLoadBalancerSG",
        "AttachGateway"
      ]
    },
    "SwarmDynDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "DependsOn": ["ApplicationLoadBalancer"],
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        },
        "TableName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "dynamodbtable"
            ]
          ]
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "283b0e4e-10b4-4eb1-aaa2-5b36bb60fcdf"
        }
      }
    },
    "DynDBPolicies": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": ["ManagerRole", "SwarmDynDBTable"],
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:DeleteItem",
                "dynamodb:GetItem",
                "dynamodb:UpdateItem",
                "dynamodb:Query"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:dynamodb:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":table/",
                    {
                      "Ref": "SwarmDynDBTable"
                    }
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "dyndb-getput",
        "Roles": [
          {
            "Ref": "ManagerRole"
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "16396153-4927-4034-b268-2193b423a0f6"
        }
      }
    },
    "ManagerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": ["sts:AssumeRole"],
              "Effect": "Allow",
              "Principal": {
                "Service": ["ec2.amazonaws.com", "autoscaling.amazonaws.com"]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/"
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "98a59bfc-c0f5-4519-8113-09fbd0af754d"
        }
      }
    },
    "WorkerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": ["sts:AssumeRole"],
              "Effect": "Allow",
              "Principal": {
                "Service": ["ec2.amazonaws.com", "autoscaling.amazonaws.com"]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/"
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "27392f87-6ffd-40af-89fb-9172209cf6c0"
        }
      }
    },
    "ManagerInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "DependsOn": "ManagerRole",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "ManagerRole"
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "06c73e42-4273-413b-bab5-035a161da893"
        }
      }
    },
    "WorkerInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "DependsOn": "WorkerRole",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "WorkerRole"
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "24683055-1243-4899-939e-cbd5cc09ae0b"
        }
      }
    },
    "DynDBWorkerPolicies": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": ["WorkerRole", "SwarmDynDBTable"],
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": ["dynamodb:GetItem", "dynamodb:Query"],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:dynamodb:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":table/",
                    {
                      "Ref": "SwarmDynDBTable"
                    }
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "worker-dyndb-get",
        "Roles": [
          {
            "Ref": "WorkerRole"
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "8dd76f4a-5ebb-4a4c-9242-a5cdabbfe152"
        }
      }
    },
    "EBSPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": ["ManagerRole", "WorkerRole"],
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:CreateTags",
                "ec2:AttachVolume",
                "ec2:DetachVolume",
                "ec2:CreateVolume",
                "ec2:DeleteVolume",
                "ec2:DescribeVolumes",
                "ec2:DescribeVolumeStatus",
                "ec2:CreateSnapshot",
                "ec2:DeleteSnapshot",
                "ec2:DescribeSnapshots"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ebs-policy",
        "Roles": [
          {
            "Ref": "ManagerRole"
          },
          {
            "Ref": "WorkerRole"
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "6eb0cfdc-e10b-4cd4-9b5d-c7b171979bf2"
        }
      }
    },
    "SwarmAPIPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": ["ManagerRole", "WorkerRole"],
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:DescribeInstances",
                "ec2:DescribeTags",
                "ec2:DescribeVpcAttribute"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "swarm-api-policy",
        "Roles": [
          {
            "Ref": "ManagerRole"
          },
          {
            "Ref": "WorkerRole"
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "4b6d2d78-df91-4118-b6fc-dd4c1af76541"
        }
      }
    },
    "WorkerAsg": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": {
            "Ref": "ClusterSize"
          },
          "Timeout": "PT20M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": "1",
          "MinInstancesInService": {
            "Ref": "ClusterSize"
          },
          "PauseTime": "PT20M",
          "WaitOnResourceSignals": "true"
        }
      },
      "Properties": {
        "AutoScalingGroupName": "Worker AutoScaling Group",
        "DesiredCapacity": {
          "Ref": "ClusterSize"
        },
        "LaunchTemplate": {
          "LaunchTemplateId": {
            "Ref": "WorkerLaunchTemplate"
          },
          "Version": {
            "Fn::GetAtt": ["WorkerLaunchTemplate", "LatestVersionNumber"]
          }
        },
        "MinSize": 0,
        "MaxSize": 6,
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Worker"
                ]
              ]
            }
          },
          {
            "Key": "swarm-node-type",
            "PropagateAtLaunch": true,
            "Value": "worker"
          },
          {
            "Key": "swarm-stack-id",
            "PropagateAtLaunch": true,
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "DOCKER_VERSION",
            "PropagateAtLaunch": true,
            "Value": {
              "Fn::FindInMap": ["DockerEnvironment", "version", "docker"]
            }
          },
          {
            "Key": "ENVIRONMENT",
            "PropagateAtLaunch": true,
            "Value": "production"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Fn::If": [
              "HasOnly2AZs",
              {
                "Fn::Join": [
                  ",",
                  [
                    {
                      "Ref": "PubSubnetAz1"
                    },
                    {
                      "Ref": "PubSubnetAz2"
                    }
                  ]
                ]
              },
              {
                "Fn::Join": [
                  ",",
                  [
                    {
                      "Ref": "PubSubnetAz1"
                    },
                    {
                      "Ref": "PubSubnetAz2"
                    },
                    {
                      "Ref": "PubSubnetAz3"
                    }
                  ]
                ]
              }
            ]
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "fe3a8fae-207b-4572-a7ce-ceb5c2e142bf"
        }
      }
    },
    "WorkerLaunchTemplate": {
      "DependsOn": "ManagerAsg",
      "Type": "AWS::EC2::LaunchTemplate",
      "Properties": {
        "LaunchTemplateData": {
          "BlockDeviceMappings": [
            {
              "DeviceName": "/dev/sda1",
              "Ebs": {
                "Encrypted": "true",
                "VolumeSize": {
                  "Ref": "WorkerDiskSize"
                },
                "VolumeType": "gp2"
              }
            }
          ],
          "EbsOptimized": "false",
          "IamInstanceProfile": {
            "Arn": {
              "Fn::GetAtt": ["WorkerInstanceProfile", "Arn"]
            }
          },
          "ImageId": {
            "Fn::FindInMap": [
              "AWSRegionArch2AMI",
              {
                "Ref": "AWS::Region"
              },
              {
                "Fn::FindInMap": [
                  "AWSInstanceType2Arch",
                  {
                    "Ref": "WorkerInstanceType"
                  },
                  "Arch"
                ]
              }
            ]
          },
          "InstanceType": {
            "Ref": "WorkerInstanceType"
          },
          "KeyName": {
            "Ref": "KeyName"
          },
          "NetworkInterfaces": [
            {
              "AssociatePublicIpAddress": "true",
              "DeleteOnTermination": "true",
              "DeviceIndex": 0,
              "Groups": [
                {
                  "Ref": "NodeVpcSG"
                }
              ]
            }
          ],
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "#!/bin/bash -xe\n",
                  "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n",
                  "apt-get update\n",
                  "apt-get -y install python-pip\n",
                  "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                  "cfn-init -v --resource WorkerAsg",
                  " --stack ",
                  {
                    "Ref": "AWS::StackName"
                  },
                  " --region ",
                  {
                    "Ref": "AWS::Region"
                  },
                  "\n",
                  "# variable\n",
                  "export LOCAL_IP=$(wget -qO- http://169.254.169.254/latest/meta-data/local-ipv4)\n",
                  "export INSTANCE_TYPE=$(wget -qO- http://169.254.169.254/latest/meta-data/instance-type)\n",
                  "export NODE_AZ=$(wget -qO- http://169.254.169.254/latest/meta-data/placement/availability-zone/)\n",
                  "export REGION=$(echo $NODE_AZ | sed 's/.$//')\n",
                  "export ENABLE_CLOUDWATCH_LOGS='",
                  {
                    "Ref": "EnableCloudWatchLogs"
                  },
                  "'\n",
                  "export DOCKER_VERSION='",
                  {
                    "Fn::FindInMap": ["DockerEnvironment", "version", "install"]
                  },
                  "'\n",
                  "export AWS_REGION='",
                  {
                    "Ref": "AWS::Region"
                  },
                  "'\n",
                  "export MANAGER_SECURITY_GROUP_ID='",
                  {
                    "Ref": "ManagerVpcSG"
                  },
                  "'\n",
                  "export WORKER_SECURITY_GROUP_ID='",
                  {
                    "Ref": "NodeVpcSG"
                  },
                  "'\n",
                  "export DYNAMODB_TABLE='",
                  {
                    "Ref": "SwarmDynDBTable"
                  },
                  "'\n",
                  "export STACK_NAME='",
                  {
                    "Ref": "AWS::StackName"
                  },
                  "'\n",
                  "export STACK_ID='",
                  {
                    "Ref": "AWS::StackId"
                  },
                  "'\n",
                  "export ACCOUNT_ID='",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  "'\n",
                  "export VPC_ID='",
                  {
                    "Ref": "Vpc"
                  },
                  "'\n",
                  "export LIFECYCLE_QUEUE='",
                  {
                    "Ref": "SwarmSQS"
                  },
                  "'\n",
                  "export RUN_VACUUM='",
                  {
                    "Ref": "EnableSystemPrune"
                  },
                  "'\n",
                  "export LOG_GROUP_NAME='",
                  {
                    "Fn::Join": [
                      "-",
                      [
                        {
                          "Ref": "AWS::StackName"
                        },
                        "lg"
                      ]
                    ]
                  },
                  "'\n",
                  "# remove history",
                  "\n",
                  "echo 'unset HISTFILE' >> /home/ubuntu/.bashrc\n",
                  "echo 'export LESSHISTFILE=\"-\"' >> /home/ubuntu/.bashrc\n",
                  "history -c\n",
                  "# Install docker and bash shortcuts",
                  "\n",
                  "apt-get update\n",
                  "apt-get -y install apt-transport-https ca-certificates curl gnupg-agent software-properties-common\n",
                  "curl -L https://gist.github.com/natac13/1669066880bd89489de27ed9a8b2e760/raw >> /home/ubuntu/.bash_aliases\n",
                  "source /home/ubuntu/.bashrc\n",
                  "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -\n",
                  "apt-key fingerprint 0EBFCD88\n",
                  "add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n",
                  "apt-get update\n",
                  "apt-get install -y docker-ce=$DOCKER_VERSION\n",
                  "usermod -aG docker ubuntu\n",
                  "# init-aws\n",
                  "docker run --restart=no --log-driver=json-file -d -e DYNAMODB_TABLE=$DYNAMODB_TABLE -v /var/run/docker.sock:/var/run/docker.sock natac13/docker-swarm-init-aws",
                  "\n",
                  "docker run --restart=always -d -e DYNAMODB_TABLE=$DYNAMODB_TABLE -e LIFECYCLE_QUEUE=$LIFECYCLE_QUEUE -e RUN_VACUUM=$RUN_VACUUM -v /var/run/docker.sock:/var/run/docker.sock -v /var/log:/var/log natac13/docker-swarm-guide-aws",
                  "\n",
                  "cfn-signal -e $? --resource ManagerAsg",
                  " --stack ",
                  {
                    "Ref": "AWS::StackName"
                  },
                  " --region ",
                  {
                    "Ref": "AWS::Region"
                  }
                ]
              ]
            }
          }
        },
        "LaunchTemplateName": "WorkerLaunchTemplate"
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "900054dc-3593-4ce2-b356-79b07966625d"
        }
      }
    },
    "SwarmAutoscalePolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": ["ManagerRole", "WorkerRole"],
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "autoscaling:RecordLifecycleActionHeartbeat",
                "autoscaling:CompleteLifecycleAction"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "swarm-autoscale-policy",
        "Roles": [
          {
            "Ref": "ManagerRole"
          },
          {
            "Ref": "WorkerRole"
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "6b66d60d-56d9-406a-b600-33296a063761"
        }
      }
    },
    "SwarmLogPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": ["ManagerRole", "WorkerRole"],
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": ["logs:CreateLogStream", "logs:PutLogEvents"],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "swarm-log-policy",
        "Roles": [
          {
            "Ref": "ManagerRole"
          },
          {
            "Ref": "WorkerRole"
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "4e46353f-ccd4-4e79-a158-3121a058fa84"
        }
      }
    },
    "WorkerTerminationHook": {
      "Type": "AWS::AutoScaling::LifecycleHook",
      "DependsOn": "SwarmSQS",
      "Properties": {
        "AutoScalingGroupName": {
          "Ref": "WorkerAsg"
        },
        "HeartbeatTimeout": "600",
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "NotificationTargetARN": {
          "Fn::GetAtt": ["SwarmSQS", "Arn"]
        },
        "RoleARN": {
          "Fn::GetAtt": ["WorkerRole", "Arn"]
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "655088dc-bc71-4a09-89d4-b9ab846bdaac"
        }
      }
    },
    "ManagerTerminationHook": {
      "Type": "AWS::AutoScaling::LifecycleHook",
      "DependsOn": "SwarmSQS",
      "Properties": {
        "AutoScalingGroupName": {
          "Ref": "ManagerAsg"
        },
        "HeartbeatTimeout": "600",
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "NotificationTargetARN": {
          "Fn::GetAtt": ["SwarmSQS", "Arn"]
        },
        "RoleARN": {
          "Fn::GetAtt": ["ManagerRole", "Arn"]
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "c6a3ee0d-6184-4835-92fc-9889822c2580"
        }
      }
    },
    "SwarmSQSPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": ["ManagerRole", "WorkerRole", "SwarmSQS"],
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sqs:DeleteMessage",
                "sqs:ReceiveMessage",
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:GetQueueUrl",
                "sqs:ListQueues"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": ["SwarmSQS", "Arn"]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "swarm-sqs-policy",
        "Roles": [
          {
            "Ref": "ManagerRole"
          },
          {
            "Ref": "WorkerRole"
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "f94671de-f192-42e3-b5dc-fbdeeba0ddb0"
        }
      }
    },
    "SwarmSQS": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "MessageRetentionPeriod": 43200,
        "ReceiveMessageWaitTimeSeconds": 10
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "59c99d1b-fb27-4c43-bb24-e021a6d81876"
        }
      }
    },
    "SwarmSESPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": ["ManagerRole", "WorkerRole"],
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ses:ListTemplates",
                "ses:SendEmail",
                "ses:SendRawEmail"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "swarm-ses-policy",
        "Roles": [
          {
            "Ref": "ManagerRole"
          },
          {
            "Ref": "WorkerRole"
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "87c898bf-cdd3-4757-abf5-d39b49fbc4c7"
        }
      }
    },
    "EIPPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": ["ManagerRole", "WorkerRole"],
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:ReleaseAddress",
                "ec2:DisassociateAddress",
                "ec2:DescribeAddresses",
                "ec2:AssociateAddress",
                "ec2:AllocateAddress"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "swarm-eip-policy",
        "Roles": [
          {
            "Ref": "ManagerRole"
          },
          {
            "Ref": "WorkerRole"
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "d50d8804-4d8d-43d2-a9d5-ab0919dca701"
        }
      }
    }
  }
}
